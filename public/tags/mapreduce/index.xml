<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mapreduce on vaneyckt</title>
    <link>http://vaneyckt.io/tags/mapreduce/</link>
    <description>Recent content in Mapreduce on vaneyckt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Mon, 13 Jul 2015 11:07:43 -0400</lastBuildDate>
    <atom:link href="http://vaneyckt.io/tags/mapreduce/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cheap MapReduce in Go</title>
      <link>http://vaneyckt.io/posts/cheap-mapreduce-in-go/</link>
      <pubDate>Mon, 13 Jul 2015 11:07:43 -0400</pubDate>
      
      <guid>http://vaneyckt.io/posts/cheap-mapreduce-in-go/</guid>
      <description>

&lt;p&gt;Here at &lt;a href=&#34;http://www.malwarebytes.org&#34;&gt;Malwarebytes&lt;/a&gt; we have to deal with a huge amount of data generated by many different systems, malware research teams, telemetry, etc. That data can span for several Terabytes on a daily basis.&lt;/p&gt;

&lt;p&gt;We have been using Amazon&amp;rsquo;s Elastic MapReduce (EMR) in many different occasions, but we are always looking to simplify our systems wherever we can. Before I start another flame-war about this topic and why we decided to create a MapReduce job that runs in a single machine as oppose to a cluster of EC2 instances, let me explain. When creating complex systems that leverages a cluster of machines, it comes with a lot of extra costs from DevOps, IT, deployments and many other things that now we need to mantain and keep up-to-date. There are cases where we would like to churn over tons of data, but we don&amp;rsquo;t need to be super fast, or leverage a huge complex infrastructure, therefore reducing lots of the costs and maintenance associated with it.&lt;/p&gt;

&lt;p&gt;Other larger MapReduce jobs still runs within EMR, since we need more scalability and faster turn around times, and wouldn&amp;rsquo;t be appropriate to be executed in a single machine.&lt;/p&gt;

&lt;h3 id=&#34;the-goal:1581d86ae1166838a7c11f8a2972c300&#34;&gt;The Goal&lt;/h3&gt;

&lt;p&gt;We have a bunch of different anonymous telemetry systems that collects tons of data every second, and some of our executives wanted to have some data aggregated into CSV files that could be loaded into Excel and a couple of other analytics systems to generate custom Pivot Tables, so we can better understand some of the usage patterns and dig information from our telemetry, without us needing to write complicated reporting systems that would like change a lot.&lt;/p&gt;

&lt;p&gt;Below is a stripped down version of our telemetry data so you guys can better understand what we were trying to accomplish.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Request&amp;quot;: {
        &amp;quot;time&amp;quot;: &amp;quot;2015-07-13 18:37:00&amp;quot;,
        &amp;quot;processedTime&amp;quot;: &amp;quot;2015-07-13 18:37:14&amp;quot;,
        &amp;quot;uuid&amp;quot;: &amp;quot;56ca2dbffc5f451285bade8e8ffef12c&amp;quot;,
        &amp;quot;jobId&amp;quot;: &amp;quot;ffffffc8f9af58389681e4a9749a4e6c&amp;quot;,
        &amp;quot;Sender&amp;quot;: &amp;quot;scanner&amp;quot;,
        &amp;quot;Trigger&amp;quot;: &amp;quot;update&amp;quot;
    },
    &amp;quot;App&amp;quot;: {
        &amp;quot;Program&amp;quot;: &amp;quot;app&amp;quot;,
        &amp;quot;Build&amp;quot;: &amp;quot;consumer&amp;quot;,
        &amp;quot;License&amp;quot;: &amp;quot;licensed&amp;quot;,
        &amp;quot;Version&amp;quot;: &amp;quot;2.1.8&amp;quot;
    },
    &amp;quot;Connection&amp;quot;: {
        &amp;quot;Type&amp;quot;: &amp;quot;broadband&amp;quot;,
        &amp;quot;ISP&amp;quot;: &amp;quot;Telecom Italia&amp;quot;
    },
    &amp;quot;Region&amp;quot;: {
        &amp;quot;Continent&amp;quot;: &amp;quot;EU&amp;quot;,
        &amp;quot;Country&amp;quot;: &amp;quot;IT&amp;quot;,
        &amp;quot;Region&amp;quot;: &amp;quot;08&amp;quot;,
        &amp;quot;City&amp;quot;: &amp;quot;Genoa&amp;quot;
    },
    &amp;quot;Client&amp;quot;: {
        &amp;quot;OsVersion&amp;quot;: &amp;quot;Windows 7 Service Pack 1&amp;quot;,
        &amp;quot;Language&amp;quot;: &amp;quot;it&amp;quot;,
        &amp;quot;Architecture&amp;quot;: &amp;quot;x64&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we have some simple telemetry data that our collector machines generate constantly from a few different systems. These JSON records gets aggregated and saved into thousands of different files into batches that can contain hundreds of thousands of lines each.&lt;/p&gt;

&lt;p&gt;Each file contains some header comments with information from the collector and some metadata about this. Here is an example of one of these files that we need to process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#  Type:				collector
#  Queue:				client
#  Processed At:		2015-07-13 18:37:14
#  Format:				json
#  Program Version:		2015-04-15
#  EC2 Instance Id:		i-d561a6fa
{ &amp;quot;Request&amp;quot;: { &amp;quot;time&amp;quot;: &amp;quot;2015-07-13 18:37:00&amp;quot;, &amp;quot;processedTime&amp;quot;: &amp;quot;2015-07-13 18:37:14&amp;quot;, ...
{ &amp;quot;Request&amp;quot;: { &amp;quot;time&amp;quot;: &amp;quot;2015-07-13 18:37:00&amp;quot;, &amp;quot;processedTime&amp;quot;: &amp;quot;2015-07-13 18:37:14&amp;quot;, ...
{ &amp;quot;Request&amp;quot;: { &amp;quot;time&amp;quot;: &amp;quot;2015-07-13 18:37:00&amp;quot;, &amp;quot;processedTime&amp;quot;: &amp;quot;2015-07-13 18:37:14&amp;quot;, ...
{ &amp;quot;Request&amp;quot;: { &amp;quot;time&amp;quot;: &amp;quot;2015-07-13 18:37:00&amp;quot;, &amp;quot;processedTime&amp;quot;: &amp;quot;2015-07-13 18:37:14&amp;quot;, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this particular job requirement, we needed to aggregate counts of the unique combination that some of these fields have, in order to generate proper data for our Pivot Tables. Therefore this was a job for a MapReduce implementation, where we would aggregate the unique occurrences of each permutation of the data and then reduce the counts into the desired aggregation.&lt;/p&gt;

&lt;p&gt;We wanted to ignore some fields in the JSON record, so we come up with a &lt;code&gt;Telemetry&lt;/code&gt; structure that would map the fields that we would like to uniquely aggregate from. Here is what we came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Telemetry struct {
	Request struct {
    	Sender  string `json:&amp;quot;Sender,omitempty&amp;quot;`
    	Trigger string `json:&amp;quot;Trigger,omitempty&amp;quot;`
    } `json:&amp;quot;Request,omitempty&amp;quot;`

	App struct {
    	Program  string `json:&amp;quot;Program,omitempty&amp;quot;`
    	Build    string `json:&amp;quot;Build,omitempty&amp;quot;`
    	License  string `json:&amp;quot;License,omitempty&amp;quot;`
    	Version  string `json:&amp;quot;Version,omitempty&amp;quot;`
    } `json:&amp;quot;App,omitempty&amp;quot;`

	Connection struct {
    	Type string `json:&amp;quot;Type,omitempty&amp;quot;`
    } `json:&amp;quot;Connection,omitempty&amp;quot;`

	Region struct {
    	Continent string `json:&amp;quot;Continent,omitempty&amp;quot;`
    	Country   string `json:&amp;quot;Country,omitempty&amp;quot;`
    } `json:&amp;quot;Region,omitempty&amp;quot;`

	Client struct {
    	OsVersion    string `json:&amp;quot;OsVersion,omitempty&amp;quot;`
    	Language     string `json:&amp;quot;Language,omitempty&amp;quot;`
    	Architecture string `json:&amp;quot;Architecture,omitempty&amp;quot;`
    } `json:&amp;quot;Client,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So any permutation occurrence of any of these fields above, would generate a single line, with the correspondent occurrence count in the final output of our MapReduce.&lt;/p&gt;

&lt;p&gt;Now that we have a better understanding on what were trying to accomplish, let&amp;rsquo;s look how we did implement the MapReduce for this.&lt;/p&gt;

&lt;h3 id=&#34;enumerating-files-for-the-job:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Enumerating Files for the Job&lt;/h3&gt;

&lt;p&gt;In order to find files that we need to feed into our MapReduce engine, we would need to create a method to enumerate all the files in directory, and potentially sub-directories. For that, we will leverage the &lt;code&gt;Walk()&lt;/code&gt; method inside the &lt;code&gt;filepath&lt;/code&gt; package that is part of the standard library.&lt;/p&gt;

&lt;p&gt;This method takes a walk function that has the following method signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type WalkFunc func(path string, info os.FileInfo, err error) error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have implemented the enumeration function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func enumerateFiles(dirname string) chan interface{} {
	output := make(chan interface{})
	go func() {
		filepath.Walk(dirname, func(path string, f os.FileInfo, err error) error {
			if !f.IsDir() {
				output &amp;lt;- path
			}
			return nil
		})
		close(output)
	}()
	return output
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will first create a channel that will receive each file that is encountered by the Walk function, which will be used later in the our mapper function.&lt;/p&gt;

&lt;h3 id=&#34;generating-tasks-for-our-mapper:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Generating Tasks for our Mapper&lt;/h3&gt;

&lt;p&gt;Another method that we need to write is one that will parse a single task file and enumerate all JSON records. Remember, we saved each JSON record as a separate individual line in our task file. We also need to account for the meta headers and ignore those.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func enumerateJSON(filename string) chan string {
	output := make(chan string)
	go func() {
		file, err := os.Open(filename)
		if err != nil {
			return
		}
		defer file.Close()
		reader := bufio.NewReader(file)
		for {
			line, err := reader.ReadString(&#39;\n&#39;)
			if err == io.EOF {
				break
			}

			// ignore any meta comments on top of JSON file
			if strings.HasPrefix(line, &amp;quot;#&amp;quot;) == true {
				continue
			}

			// add each json line to our enumeration channel
			output &amp;lt;- line
		}
		close(output)
	}()
	return output
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;defining-our-interface:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Defining our interface&lt;/h3&gt;

&lt;p&gt;For our MapReduce implementation we would need to define our collector type and a few function types that we will use later in the process. Here is what we came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// MapperCollector is a channel that collects the output from mapper tasks
type MapperCollector chan chan interface{}

// MapperFunc is a function that performs the mapping part of the MapReduce job
type MapperFunc func(interface{}, chan interface{})

// ReducerFunc is a function that performs the reduce part of the MapReduce job
type ReducerFunc func(chan interface{}, chan interface{})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we are leverage Go channels a lot here, and this will be the key to bridge all this together.&lt;/p&gt;

&lt;h3 id=&#34;the-mapper:1581d86ae1166838a7c11f8a2972c300&#34;&gt;The Mapper&lt;/h3&gt;

&lt;p&gt;Onto the mapper function. The whole idea on this mapper implementation is to parse a single file and go over each JSON record that were enumerated, decoding the JSON content into our Telemetry structure and accumulate counts for each dimension (unique permutation of the data).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func mapper(filename interface{}, output chan interface{}) {
	results := map[Telemetry]int{}

    // start the enumeration of each JSON lines in the file
	for line := range enumerateJSON(filename.(string)) {

		// decode the telemetry JSON line
		dec := json.NewDecoder(strings.NewReader(line))
		var telemetry Telemetry

		// if line cannot be JSON decoded then skip to next one
		if err := dec.Decode(&amp;amp;telemetry); err == io.EOF {
			continue
		} else if err != nil {
			continue
		}

		// stores Telemetry structure in the mapper results dictionary
		previousCount, exists := results[telemetry]
		if !exists {
			results[telemetry] = 1
		} else {
			results[telemetry] = previousCount + 1
		}
	}

	output &amp;lt;- results
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick on this mapper function lies into the way we define our Map to accumulate unique data. We defined a map in which the Key in our Telemetry structure as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;results := map[Telemetry]int{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, in Go map keys may be of any type that is comparable. The language spec defines this precisely, but in short, comparable types are boolean, numeric, string, pointer, channel, and interface types, and structs or arrays that contain only those types. Notably absent from the list are slices, maps, and functions; these types cannot be compared using ==, and may not be used as map keys. It&amp;rsquo;s obvious that strings, ints, and other basic types should be available as map keys, but perhaps unexpected are struct keys. Struct can be used to key data by multiple dimensions.&lt;/p&gt;

&lt;h3 id=&#34;the-reducer:1581d86ae1166838a7c11f8a2972c300&#34;&gt;The Reducer&lt;/h3&gt;

&lt;p&gt;Now for the reducer part of our job, we would simply need to aggregate the different Telemetry dimensions that were generated by all the different mappers that were ran in parallel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func reducer(input chan interface{}, output chan interface{}) {
	results := map[Telemetry]int{}
	for matches := range input {
		for key, value := range matches.(map[Telemetry]int) {
			_, exists := results[key]
			if !exists {
				results[key] = value
			} else {
				results[key] = results[key] + value
			}
		}
	}
	output &amp;lt;- results
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dispatching-tasks:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Dispatching Tasks&lt;/h2&gt;

&lt;p&gt;In this MapReduce implementation, were are leveraging channels for the different inputs and outputs from file enumeration, to Mappers and finally Reducers. We need to create some dispatcher functions to bridge all this together in invoke the next step in each case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func mapperDispatcher(mapper MapperFunc, input chan interface{}, collector MapperCollector) {
	for item := range input {
		taskOutput := make(chan interface{})
		go mapper(item, taskOutput)
		collector &amp;lt;- taskOutput
	}
	close(collector)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;mapperDispatcher&lt;/code&gt; function is responsible to listen on the input channel that receives each filename to be processed and invoke a &lt;code&gt;mapper&lt;/code&gt; for each file, pushing the output of the job into a &lt;code&gt;MapperCollector&lt;/code&gt;, that would be used in the next step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func reducerDispatcher(collector MapperCollector, reducerInput chan interface{}) {
	for output := range collector {
		reducerInput &amp;lt;- &amp;lt;-output
	}
	close(reducerInput)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;reducerDispatcher&lt;/code&gt; function is responsible to listen on the collector channel and push each item as the input for the Reducer task.&lt;/p&gt;

&lt;h3 id=&#34;putting-all-together-in-a-mapreduce-method:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Putting all together in a MapReduce method&lt;/h3&gt;

&lt;p&gt;Now that we have all the pieces of the puzzle, it is time for us to put all together into a MapReduce function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
	MaxWorkers = 10
)

func mapReduce(mapper MapperFunc, reducer ReducerFunc, input chan interface{}) interface{} {

	reducerInput := make(chan interface{})
	reducerOutput := make(chan interface{})
	mapperCollector := make(MapperCollector, MaxWorkers)

	go reducer(reducerInput, reducerOutput)
	go reducerDispatcher(mapperCollector, reducerInput)
	go mapperDispatcher(mapper, input, mapperCollector)

	return &amp;lt;-reducerOutput
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can observe, we are creating all the required channels that would be the conduit and bridge of this entire operation.&lt;/p&gt;

&lt;p&gt;First, we spawn a go routine that will be responsible for executing the Reducer task, listening for the input channels to operate on the data and outputing it&amp;rsquo;s task into the output channel when everything is done. Secondly, in order for the whole system to work, we need to start the dispatcher go routines that will bridge all this together invoking the next steps. The &lt;code&gt;mapperDispatcher&lt;/code&gt; is responsible to invoke the &lt;code&gt;mapper&lt;/code&gt; function that will trigger the whole MapReduce calculation.&lt;/p&gt;

&lt;p&gt;We are limiting the number of concurrent mappers to 10 in this case, but we could control the amount of concurrency of over how many mappers are simultaneously opening the tasks files and aggregating data.&lt;/p&gt;

&lt;p&gt;Finally, we have written our &lt;code&gt;main()&lt;/code&gt; function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;encoding/csv&amp;quot;
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;path/filepath&amp;quot;
	&amp;quot;runtime&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;
)

...

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU())
	fmt.Println(&amp;quot;Processing. Please wait....&amp;quot;)

    // start the enumeration of files to be processed into a channel
	input := enumerateFiles(&amp;quot;.&amp;quot;)

    // this will start the map reduce work
	results := mapReduce(mapper, reducer, input)

	// open output file
	f, err := os.Create(&amp;quot;telemetry.csv&amp;quot;)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	// make a write buffer
	writer := csv.NewWriter(f)

	for telemetry, value := range results.(map[Telemetry]int) {

		var record []string

		record = append(record, telemetry.Request.Sender)
		record = append(record, telemetry.Request.Trigger)
		record = append(record, telemetry.App.Program)
		record = append(record, telemetry.App.Build)
		record = append(record, telemetry.App.License)
		record = append(record, telemetry.App.Version)
		record = append(record, telemetry.Connection.Type)
		record = append(record, telemetry.Region.Continent)
		record = append(record, telemetry.Region.Country)
		record = append(record, telemetry.Client.OsVersion)
		record = append(record, telemetry.Client.Language)
		record = append(record, telemetry.Client.Architecture)

        // The last field of the CSV line is the aggregate count for each occurrence
		record = append(record, strconv.Itoa(value))

		writer.Write(record)
	}

	writer.Flush()

	fmt.Println(&amp;quot;Done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first step is to kick off the &lt;code&gt;enumerateFiles(...)&lt;/code&gt; function to start enumerating files to be processed that will be pushed into a input channel. Then we invoke the &lt;code&gt;mapReduce(...)&lt;/code&gt; method that will perform the entire Job returning an array of the end results.&lt;/p&gt;

&lt;p&gt;As a final step, we write the entire MapReduce results into a CSV file, printing each Telemetry dimension and it&amp;rsquo;s respective aggregate count in each line.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:1581d86ae1166838a7c11f8a2972c300&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Sometimes you don&amp;rsquo;t need overly complex infrastructures or systems to do a job well. In this case, we were running these exact same aggregations over close to 20 EMR instances that would take a few minutes to execute the entire MapReduce job over hundreds of Gigabytes of data each day.&lt;/p&gt;

&lt;p&gt;When we decided to take a look at this problem again, we rewrote this task using Go, and we now simply run this on a single 8-core machine and the whole daily execution takes about 10 minutes. We cut a lot of the costs associated with maintaining and running these EMR systems and we just schedule this Go app to run once a day over our daily dataset.&lt;/p&gt;

&lt;p&gt;You can find the entire code here:&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/mcastilho/e051898d129b44e2f502&#34;&gt;https://gist.github.com/mcastilho/e051898d129b44e2f502&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>