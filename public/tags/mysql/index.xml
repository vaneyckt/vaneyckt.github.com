<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on vaneyckt</title>
    <link>http://vaneyckt.io/tags/mysql/</link>
    <description>Recent content in Mysql on vaneyckt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Sat, 19 Oct 2013 20:31:43 +0000</lastBuildDate>
    <atom:link href="http://vaneyckt.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Character set vs collation</title>
      <link>http://vaneyckt.io/posts/character_set_vs_collation/</link>
      <pubDate>Sat, 19 Oct 2013 20:31:43 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/character_set_vs_collation/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a surprising amount of confusion about this. The best explanation I&amp;rsquo;ve found is &lt;a href=&#34;http://stackoverflow.com/questions/341273/what-does-character-set-and-collation-mean-exactly/341481#341481&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A character set is a subset of all written glyphs. A character encoding specifies how those characters are mapped to numeric values. Some character encodings, like UTF-8 and UTF-16, can encode any character in the Universal Character Set. Others, like US-ASCII or ISO-8859-1 can only encode a small subset, since they use 7 and 8 bits per character, respectively. Because many standards specify both a character set and a character encoding, the term &amp;ldquo;character set&amp;rdquo; is often substituted freely for &amp;ldquo;character encoding&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A collation comprises rules that specify how characters can be compared for sorting. Collations rules can be locale-specific: the proper order of two characters varies from language to language.&lt;/p&gt;

&lt;p&gt;Choosing a character set and collation comes down to whether your application is internationalized or not. If not, what locale are you targeting?&lt;/p&gt;

&lt;p&gt;In order to choose what character set you want to support, you have to consider your application. If you are storing user-supplied input, it might be hard to foresee all the locales in which your software will eventually be used. To support them all, it might be best to support the UCS (Unicode) from the start. However, there is a cost to this; many western European characters will now require two bytes of storage per character instead of one.&lt;/p&gt;

&lt;p&gt;Choosing the right collation can help performance if your database uses the collation to create an index, and later uses that index to provide sorted results. However, since collation rules are often locale-specific, that index will be worthless if you need to sort results according to the rules of another locale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing I&amp;rsquo;d like to add is that some collations are more cpu intensive than others. For example, &lt;code&gt;utf8_general_ci&lt;/code&gt; treats À, Á, and Å as being equal to A when doing comparisons. This is in contrast to &lt;code&gt;utf8_unicode_ci&lt;/code&gt; which uses about 10% more cpu, but differentiates between these characters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL write locks also prevent reads</title>
      <link>http://vaneyckt.io/posts/mysql_write_locks_also_prevent_reads/</link>
      <pubDate>Thu, 17 Oct 2013 17:20:45 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/mysql_write_locks_also_prevent_reads/</guid>
      <description>&lt;p&gt;Locking a table with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;table_name = &#39;widgets&#39;
ActiveRecord::Base.connection.execute(&amp;quot;LOCK TABLES #{table_name} WRITE&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ensures that &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/lock-tables.html&#34;&gt;only the current connection can access that table&lt;/a&gt;. Other connections cannot even read from this table while it is locked!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails migrations and the dangers of implicit commits</title>
      <link>http://vaneyckt.io/posts/rails_migrations_and_the_dangers_of_implicit_commits/</link>
      <pubDate>Wed, 16 Oct 2013 18:45:12 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/rails_migrations_and_the_dangers_of_implicit_commits/</guid>
      <description>&lt;p&gt;I recently came across the migration below. At first sight it looks like everything is okay, but there is actually a very dangerous assumption being made here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# migration to convert table to utf8
class ConvertWidgetsTableToUtf8Unicode &amp;lt; ActiveRecord::Migration
  def up
    ActiveRecord::Base.transaction do
      table_name = &#39;widgets&#39;
      say &amp;quot;converting #{table_name} table to utf8_unicode_ci&amp;quot;

      execute(&amp;quot;ALTER TABLE #{table_name} CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci&amp;quot;)
      execute(&amp;quot;ALTER TABLE #{table_name} DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the utf8 conversion code is wrapped inside a transaction. The assumption here is that if something goes wrong the transaction will trigger a rollback. However, an &lt;code&gt;ALTER TABLE&lt;/code&gt; command in MySQL causes an &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/implicit-commit.html&#34;&gt;implicit commit&lt;/a&gt;. This means that the rollback will not undo any changes introduced by the &lt;code&gt;ALTER TABLE&lt;/code&gt; command!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>