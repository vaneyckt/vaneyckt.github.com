<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vaneyckt</title>
    <link>http://vaneyckt.io/posts/</link>
    <description>Recent content in Posts on vaneyckt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Sun, 16 Aug 2015 19:43:34 +0000</lastBuildDate>
    <atom:link href="http://vaneyckt.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installing Chromedriver</title>
      <link>http://vaneyckt.io/posts/installing_chromedriver/</link>
      <pubDate>Sun, 16 Aug 2015 19:43:34 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/installing_chromedriver/</guid>
      <description>&lt;p&gt;Some time ago I needed to install &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34;&gt;chromedriver&lt;/a&gt; on a ubuntu machine. While this wasn&amp;rsquo;t too hard, I was nevertheless surprised by the number of open &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; questions on this topic. So I decided to leave some notes for my future self.&lt;/p&gt;

&lt;p&gt;First of all, let&amp;rsquo;s install chromedriver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ LATEST_RELEASE=$(curl http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
$ wget http://chromedriver.storage.googleapis.com/$LATEST_RELEASE/chromedriver_linux64.zip
$ unzip chromedriver_linux64.zip
$ rm chromedriver_linux64.zip
$ sudo mv chromedriver /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens when we try and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chromedriver
    chromedriver: error while loading shared libraries: libgconf-2.so.4:
    cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a bit unexpected. Luckily we can easily fix this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install libgconf-2-4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a functioning chromedriver, the only thing left to do is to install Chrome. After all, chromedriver can&amp;rsquo;t function without Chrome.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
$ sudo sh -c &#39;echo &amp;quot;deb http://dl.google.com/linux/chrome/deb/ stable main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list&#39;
$ sudo apt-get update
$ sudo apt-get install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. You should be good to go now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterating over a hash containing arrays</title>
      <link>http://vaneyckt.io/posts/iterating_over_a_hash_containing_arrays/</link>
      <pubDate>Tue, 15 Oct 2013 16:46:02 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/iterating_over_a_hash_containing_arrays/</guid>
      <description>&lt;p&gt;Last week I was implementing some auditing functionality in a rails app. At some point I was writing a page that would display how the attributes of a given ActiveRecord object had been changed. One of my colleagues spotted this and pointed out the following neat bit of syntactic sugar in Ruby.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;changes = {:attribute_a =&amp;gt; [1, 2], :attribute_b =&amp;gt; [3, 4]}

changes.each do |attribute, (before, after)|
  puts &amp;quot;#{attribute}: #{before} - #{after}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I later learned you can even do things like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;data = {:foo =&amp;gt; [[1, 2], 3]}

data.each do |key, ((a, b), c)|
  puts &amp;quot;#{key}: #{a} - #{b} - #{c}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>URI.js and URL manipulation in rails</title>
      <link>http://vaneyckt.io/posts/uri_js_and_url_manipulation_in_rails/</link>
      <pubDate>Sun, 13 Oct 2013 14:55:23 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/uri_js_and_url_manipulation_in_rails/</guid>
      <description>&lt;p&gt;Manipulating urls in javascript often ends up being an exercise in string interpolation. This rarely produces good looking code. Recently we&amp;rsquo;ve started enforcing the use of the &lt;a href=&#34;https://medialize.github.io/URI.js/&#34;&gt;URI.js library&lt;/a&gt; to combat this.&lt;/p&gt;

&lt;p&gt;Our new approach has us embed any necessary urls in hidden input fields on the web page in question. Rather than hardcoding these urls, we use the named route functionality offered by rails as this provides more flexibility. When the page gets rendered, these named routes are converted to actual urls through ERB templating. The embedded urls can then be fetched by javascript code and manipulated with URI.js.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s no silver bullet, but the resulting code is a lot more readable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The css !important keyword</title>
      <link>http://vaneyckt.io/posts/the_css_important_keyword/</link>
      <pubDate>Sat, 12 Oct 2013 15:03:23 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/the_css_important_keyword/</guid>
      <description>&lt;p&gt;Today I learned about the css !important keyword. I was trying to change the way code snippets (gists) were being displayed on a site, but found my css rules being ignored.&lt;/p&gt;

&lt;p&gt;As it turned out, the javascript snippets used for embedding gists were adding an additional css stylesheet to the page. Since this stylesheet was getting added after my own stylesheet, its rules had priority over my own. The solution was to add &lt;code&gt;!important&lt;/code&gt; to my own rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.gist-data {
  border-bottom: 1px !important;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Finding models from strings with rails</title>
      <link>http://vaneyckt.io/posts/finding_models_from_strings_with_rails/</link>
      <pubDate>Fri, 11 Oct 2013 16:27:35 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/finding_models_from_strings_with_rails/</guid>
      <description>&lt;p&gt;Imagine you have a Widget model that stores data in a table &amp;lsquo;widgets&amp;rsquo;. At some point in your rails app you find yourself being given a string &amp;lsquo;Widget&amp;rsquo; and are asked to find the Widget model. This can be done like shown here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;str = &#39;Widget&#39;
model = str.constantize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, things get a bit harder when you have multiple Widget model subclasses (Widget::A, Widget::B), all of which are stored in the widgets table. This time around you&amp;rsquo;re given the string &amp;lsquo;Widget::A&amp;rsquo; and are asked to get the Widget model.&lt;/p&gt;

&lt;p&gt;In order to solve this we&amp;rsquo;ll need to ask the Widget::A model to give us its table name. If you&amp;rsquo;re following rails conventions you can then in turn use the table name to get the model you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;str = &#39;Widget&#39;
model = str.constantize.table_name.classify.constantize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the above will only work if you&amp;rsquo;ve followed rails naming conventions though :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving data in a time range with rails</title>
      <link>http://vaneyckt.io/posts/retrieving_data_in_a_time_range_with_rails/</link>
      <pubDate>Thu, 10 Oct 2013 19:22:45 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/retrieving_data_in_a_time_range_with_rails/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing this mostly as a reminder to myself, since I keep forgetting this :)&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widgets = Widget.where(&amp;quot;? &amp;lt;= created_at AND created_at &amp;lt;= ?&amp;quot;, time_from, time_to)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;widgets = Widget.where(:created_at =&amp;gt; time_from .. time_to)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GET vs POST</title>
      <link>http://vaneyckt.io/posts/get_vs_post/</link>
      <pubDate>Wed, 09 Oct 2013 16:09:32 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/get_vs_post/</guid>
      <description>

&lt;p&gt;Today I was looking into why a particular GET request was failing on IE. As it turned out this was due to IE not appreciating long query strings. While going through our nginx logs, we also found nginx had a default query string limit that was being hit sporadically by some other customers as well. The solution in both cases was to move the affected calls from GET to POST.&lt;/p&gt;

&lt;p&gt;The above problem prompted me to take a closer look at the differences between GET and POST requests. You probably use these all the time, but do you know how each of them functions?&lt;/p&gt;

&lt;h4 id=&#34;get-requests:4d95a9bef13dce29490ef41cb06ad212&#34;&gt;GET requests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;can be bookmarked&lt;/li&gt;
&lt;li&gt;can be cached for faster response time on subsequent request&lt;/li&gt;
&lt;li&gt;request is stored in browser history&lt;/li&gt;
&lt;li&gt;uses query strings to send data. There is a limit to the allowable length of a query string.&lt;/li&gt;
&lt;li&gt;have their url and query strings stored in plaintext in server logs. This is why you should never send passwords over GET requests!&lt;/li&gt;
&lt;li&gt;use these for actions that retrieve data. For example, you don&amp;rsquo;t want to use GET requests for posting comments on your blog. Otherwise an attacker could copy a url that posts a specific comment and put it on twitter. Every time someone were to click this link, a comment would now be posted on your blog.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;post-requests:4d95a9bef13dce29490ef41cb06ad212&#34;&gt;POST requests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cannot be bookmarked&lt;/li&gt;
&lt;li&gt;cannot be cached&lt;/li&gt;
&lt;li&gt;request will not be stored in browser history&lt;/li&gt;
&lt;li&gt;uses POST body to send data. There is no limit to the amount of data sent due to the multipart content-type spreading your data across multiple messages when necessary.&lt;/li&gt;
&lt;li&gt;have their url stored in plaintext in server logs. The data itself will not be logged though.&lt;/li&gt;
&lt;li&gt;use these for actions that alter data&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The dig command</title>
      <link>http://vaneyckt.io/posts/the_dig_command/</link>
      <pubDate>Tue, 08 Oct 2013 13:24:17 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/the_dig_command/</guid>
      <description>&lt;p&gt;Today I learned of the existence of the &lt;a href=&#34;http://linux.die.net/man/1/dig&#34;&gt;dig command&lt;/a&gt;. A very useful little tool for DNS lookups. Here&amp;rsquo;s an example of it in action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dig www.google.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.3-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 4868
;; flags: qr rd ra; QUERY: 1, ANSWER: 6, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;www.google.com.			IN	A

;; ANSWER SECTION:
www.google.com.		72	IN	A	74.125.24.105
www.google.com.		72	IN	A	74.125.24.103
www.google.com.		72	IN	A	74.125.24.104
www.google.com.		72	IN	A	74.125.24.99
www.google.com.		72	IN	A	74.125.24.147
www.google.com.		72	IN	A	74.125.24.106

;; Query time: 11 msec
;; SERVER: 192.168.0.1#53(192.168.0.1)
;; WHEN: Sat Aug 29 13:38:48 2015
;; MSG SIZE  rcvd: 128
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Profiling rails assets precompilation</title>
      <link>http://vaneyckt.io/posts/profiling_rails_assets_precompilation/</link>
      <pubDate>Sun, 01 Sep 2013 21:01:02 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/profiling_rails_assets_precompilation/</guid>
      <description>&lt;p&gt;Assets precompilation on rails can take a fair bit of time. This is especially annoying in scenarios where you want to deploy your app multiple times a day. Let&amp;rsquo;s see if we can come up with a way to actually figure out where all this time is being spent. Also, while I will be focusing on rails 3.2 in this post, the general principle should be easy enough to apply to other rails versions.&lt;/p&gt;

&lt;p&gt;Our first call of action is finding the assets precompilation logic. A bit of digging will turn up the &lt;a href=&#34;https://github.com/rails/rails/blob/3-2-stable/actionpack/lib/sprockets/assets.rake&#34;&gt;assets.rake file&lt;/a&gt; for rails 3.2. The relevant code starts on lines 59-67 and from there on out invokes methods throughout the entire file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lines 59-67 of assets.rake
task :all do
  Rake::Task[&amp;quot;assets:precompile:primary&amp;quot;].invoke
  # We need to reinvoke in order to run the secondary digestless
  # asset compilation run - a fresh Sprockets environment is
  # required in order to compile digestless assets as the
  # environment has already cached the assets on the primary
  # run.
  if Rails.application.config.assets.digest
    ruby_rake_task(&amp;quot;assets:precompile:nondigest&amp;quot;, false)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we follow the calls made by the code above we can see that the actual compilation takes place on lines 50-56 of assets.rake and is done by the compile method of the &lt;a href=&#34;https://github.com/rails/rails/blob/3-2-stable/actionpack/lib/sprockets/static_compiler.rb&#34;&gt;Sprockets::StaticCompiler class&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# compile method of Sprockets::StaticCompiler class
def compile
  manifest = {}
  env.each_logical_path(paths) do |logical_path|
    if asset = env.find_asset(logical_path)
      digest_path = write_asset(asset)
      manifest[asset.logical_path] = digest_path
      manifest[aliased_path_for(asset.logical_path)] = digest_path
    end
  end
  write_manifest(manifest) if @manifest
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we know which code does the compiling, we can think of two ways to add some profiling to this. We could checkout the rails repo from Github, modify it locally and point our Gemfile to our modified local version of rails. Or, we could create a new rake task and monkey patch the compile method of the Sprockets::StaticCompiler class. We&amp;rsquo;ll go with the second option here as it is the more straightforward to implement.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll create a new rake file in the /lib/tasks folder of our rails app and name it &lt;code&gt;profile_assets_precompilation.rake&lt;/code&gt;. We then copy the contents of assets.rake into it, and wrap this code inside a new &amp;lsquo;profile&amp;rsquo; namespace so as to avoid conflicts. At the top of this file we&amp;rsquo;ll also add our monkey patched compile method so as to make it output profiling info. The resulting file should look like shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :profile do
  # monkey patch the compile method to output compilation times
  module Sprockets
    class StaticCompiler
      def compile
        manifest = {}
        env.each_logical_path(paths) do |logical_path|
          start_time = Time.now.to_f

          if asset = env.find_asset(logical_path)
            digest_path = write_asset(asset)
            manifest[asset.logical_path] = digest_path
            manifest[aliased_path_for(asset.logical_path)] = digest_path
          end

          # our profiling code
          duration = Time.now.to_f - start_time
          puts &amp;quot;#{logical_path} - #{duration.round(3)} seconds&amp;quot;
        end
        write_manifest(manifest) if @manifest
      end
    end
  end

  # contents of assets.rake
  namespace :assets do
    def ruby_rake_task(task, fork = true)
      env    = ENV[&#39;RAILS_ENV&#39;] || &#39;production&#39;
      groups = ENV[&#39;RAILS_GROUPS&#39;] || &#39;assets&#39;
      args   = [$0, task,&amp;quot;RAILS_ENV=#{env}&amp;quot;,&amp;quot;RAILS_GROUPS=#{groups}&amp;quot;]
      args &amp;lt;&amp;lt; &amp;quot;--trace&amp;quot; if Rake.application.options.trace
      if $0 =~ /rake\.bat\Z/i
        Kernel.exec $0, *args
      else
        fork ? ruby(*args) : Kernel.exec(FileUtils::RUBY, *args)
      end
    end

    # We are currently running with no explicit bundler group
    # and/or no explicit environment - we have to reinvoke rake to
    # execute this task.
    def invoke_or_reboot_rake_task(task)
      if ENV[&#39;RAILS_GROUPS&#39;].to_s.empty? || ENV[&#39;RAILS_ENV&#39;].to_s.empty?
        ruby_rake_task task
      else
        Rake::Task[task].invoke
      end
    end

    desc &amp;quot;Compile all the assets named in config.assets.precompile&amp;quot;
    task :precompile do
      invoke_or_reboot_rake_task &amp;quot;assets:precompile:all&amp;quot;
    end

    namespace :precompile do
      def internal_precompile(digest=nil)
        unless Rails.application.config.assets.enabled
          warn &amp;quot;Cannot precompile assets if sprockets is disabled. Please set config.assets.enabled to true&amp;quot;
          exit
        end

        # Ensure that action view is loaded and the appropriate
        # sprockets hooks get executed
        _ = ActionView::Base

        config = Rails.application.config
        config.assets.compile = true
        config.assets.digest  = digest unless digest.nil?
        config.assets.digests = {}

        env      = Rails.application.assets
        target   = File.join(Rails.public_path, config.assets.prefix)
        compiler = Sprockets::StaticCompiler.new(env,
                                                 target,
                                                 config.assets.precompile,
                                                 :manifest_path =&amp;gt; config.assets.manifest,
                                                 :digest =&amp;gt; config.assets.digest,
                                                 :manifest =&amp;gt; digest.nil?)
        compiler.compile
      end

      task :all do
        Rake::Task[&amp;quot;assets:precompile:primary&amp;quot;].invoke
        # We need to reinvoke in order to run the secondary digestless
        # asset compilation run - a fresh Sprockets environment is
        # required in order to compile digestless assets as the
        # environment has already cached the assets on the primary
        # run.
        ruby_rake_task(&amp;quot;assets:precompile:nondigest&amp;quot;, false) if Rails.application.config.assets.digest
      end

      task :primary =&amp;gt; [&amp;quot;assets:environment&amp;quot;, &amp;quot;tmp:cache:clear&amp;quot;] do
        internal_precompile
      end

      task :nondigest =&amp;gt; [&amp;quot;assets:environment&amp;quot;, &amp;quot;tmp:cache:clear&amp;quot;] do
        internal_precompile(false)
      end
    end

    desc &amp;quot;Remove compiled assets&amp;quot;
    task :clean do
      invoke_or_reboot_rake_task &amp;quot;assets:clean:all&amp;quot;
    end

    namespace :clean do
      task :all =&amp;gt; [&amp;quot;assets:environment&amp;quot;, &amp;quot;tmp:cache:clear&amp;quot;] do
        config = Rails.application.config
        public_asset_path = File.join(Rails.public_path, config.assets.prefix)
        rm_rf public_asset_path, :secure =&amp;gt; true
      end
    end

    task :environment do
      if Rails.application.config.assets.initialize_on_precompile
        Rake::Task[&amp;quot;environment&amp;quot;].invoke
      else
        Rails.application.initialize!(:assets)
        Sprockets::Bootstrap.new(Rails.application).run
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run &lt;code&gt;bundle exec rake profile:assets:precompile&lt;/code&gt; to precompile our assets while outputting profiling info. Hopefully we can now finally figure out why this is always taking so long :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regarding if statement scope in Ruby</title>
      <link>http://vaneyckt.io/posts/regarding_if_statement_scope_in_ruby/</link>
      <pubDate>Sat, 31 Aug 2013 20:22:58 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/regarding_if_statement_scope_in_ruby/</guid>
      <description>&lt;p&gt;I recently learned that &lt;code&gt;if&lt;/code&gt; statements in Ruby do not introduce scope. This means that you can write code like shown below and it&amp;rsquo;ll work fine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# perfectly valid Ruby code
if true
  foo = 5
end

puts foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first this seemed a bit weird to me. It wasn&amp;rsquo;t until I read &lt;a href=&#34;http://programmers.stackexchange.com/questions/58900/why-if-statements-do-not-introduce-scope-in-ruby-1-9&#34;&gt;this&lt;/a&gt; that I realized Ruby was even more versatile than I had first thought. As it turns out, it is this somewhat unconventional scoping rule that allows us to conditionally replace methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if foo == 5
  def some_method
    # do something
  end
else
  def some_method
    # do something else
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as conditionally modify implementations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if foo == 5
  class someClass
    # ...
  end
else
  module someModule
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s amazing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EC2 instance cost comparison</title>
      <link>http://vaneyckt.io/posts/ec2_instance_cost_comparison/</link>
      <pubDate>Sun, 11 Aug 2013 21:24:12 +0000</pubDate>
      
      <guid>http://vaneyckt.io/posts/ec2_instance_cost_comparison/</guid>
      <description>&lt;p&gt;Amazon&amp;rsquo;s pricing scheme for its ec2 instances never struck me as particularly transparent. Until recently some of my DevOps colleagues even estimated cost by cross-referencing &lt;a href=&#34;https://aws.amazon.com/ec2/instance-types&#34;&gt;instance details&lt;/a&gt; with &lt;a href=&#34;http://aws.amazon.com/ec2/pricing&#34;&gt;pricing information&lt;/a&gt;. While this approach gives reasonable results for finding the cost of a given instance type, it doesn&amp;rsquo;t lend itself very well to comparing prices across a range of different types.&lt;/p&gt;

&lt;p&gt;When talking to an ex-colleague of mine about the hardships encountered for such a common task, he pointed me to &lt;a href=&#34;http://www.ec2instances.info&#34;&gt;this absolutely brilliant page&lt;/a&gt;. It&amp;rsquo;s so unbelievably simple and well thought-out that I can&amp;rsquo;t help getting ever so slightly annoyed with whomever is in charge of communicating Amazon&amp;rsquo;s pricing structure and the subpar job they are doing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>