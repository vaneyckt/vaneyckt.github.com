<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on vaneyckt.io</title>
    <link>https://vaneyckt.io/topics/ruby/</link>
    <description>Recent content in Ruby on vaneyckt.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Tue, 18 Jul 2017 10:21:34 +0000</lastBuildDate>
    
	<atom:link href="https://vaneyckt.io/topics/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buiding a Ruby Queue with timeout functionality</title>
      <link>https://vaneyckt.io/posts/building_a_ruby_queue_with_timeout_functionality/</link>
      <pubDate>Tue, 18 Jul 2017 10:21:34 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/building_a_ruby_queue_with_timeout_functionality/</guid>
      <description>In an earlier post, we explained how condition variables can be used to create your own Queue class. This article will build further on this and show how to add a blocking shift method that supports timeouts to this class. This is a relatively advanced topic, and hence we will assume that the reader has a decent grasp of the intricacies of condition variables. A refresher on this topic, to which I will be referring throughout this text, can be found here.</description>
    </item>
    
    <item>
      <title>Ruby concurrency: in praise of condition variables</title>
      <link>https://vaneyckt.io/posts/ruby_concurrency_in_praise_of_condition_variables/</link>
      <pubDate>Mon, 17 Jul 2017 10:21:34 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/ruby_concurrency_in_praise_of_condition_variables/</guid>
      <description>In a previous post, we talked about the benefits conferred by Ruby mutexes. While a programmer&amp;rsquo;s familiarity with mutexes is likely to depend on what kind of programs she usually writes, most developers tend to be at least somewhat familiar with these particular synchronization primitives. This article, however, is going to focus on a much lesser-known synchronization construct: the condition variable.
Condition variables are used for putting threads to sleep and waking them back up once a certain condition is met.</description>
    </item>
    
    <item>
      <title>Using DTrace to measure mutex contention in Ruby</title>
      <link>https://vaneyckt.io/posts/using_dtrace_to_measure_mutex_contention_in_ruby/</link>
      <pubDate>Mon, 31 Oct 2016 20:24:12 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/using_dtrace_to_measure_mutex_contention_in_ruby/</guid>
      <description>I recently found myself working on Ruby code containing a sizable number of threads and mutexes. It wasn&amp;rsquo;t before long that I started wishing for some tool that could tell me which particular mutexes were the most heavily contended. After all, this type of information can be worth its weight in gold when trying to diagnose why your threaded program is running slower than expected.
This is where DTrace enters the picture.</description>
    </item>
    
    <item>
      <title>Ruby concurrency: in praise of the mutex</title>
      <link>https://vaneyckt.io/posts/ruby_concurrency_in_praise_of_the_mutex/</link>
      <pubDate>Thu, 17 Mar 2016 19:12:21 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/ruby_concurrency_in_praise_of_the_mutex/</guid>
      <description>When reading about Ruby you will inevitably be introduced to the Global Interpreter Lock. This mechanism tends to come up in explanations of why Ruby threads run concurrently on a single core, rather than being scheduled across multiple cores in true parallel fashion. This single core scheduling approach also explains why adding threads to a Ruby program does not necessarily result in faster execution times.
This post will start by explaining some of the details behind the GIL.</description>
    </item>
    
    <item>
      <title>How to write your own rspec retry mechanism</title>
      <link>https://vaneyckt.io/posts/how_to_write_your_own_rspec_retry_mechanism/</link>
      <pubDate>Sun, 17 Jan 2016 20:17:35 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/how_to_write_your_own_rspec_retry_mechanism/</guid>
      <description>Imagine you have an rspec test suite filled with system tests. Each system test simulates how a real user would interact with your app by opening a browser session through which it fills out text fields, clicks on buttons, and sends data to public endpoints. Unfortunately, browser drivers are not without bugs and sometimes your tests will fail because of these. Wouldn&amp;rsquo;t it be nice if we could automatically retry these failed tests?</description>
    </item>
    
    <item>
      <title>The disaster that is Ruby&#39;s timeout method</title>
      <link>https://vaneyckt.io/posts/the_disaster_that_is_rubys_timeout_method/</link>
      <pubDate>Sat, 19 Dec 2015 19:20:03 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/the_disaster_that_is_rubys_timeout_method/</guid>
      <description>On paper, Ruby&amp;rsquo;s timeout method looks like an incredibly useful piece of code. Ever had a network request occasionally slow down your entire program because it just wouldn&amp;rsquo;t finish? That&amp;rsquo;s where timeout comes in. It provides a hard guarantee that a block of code will be finished within a specified amount of time.
require &#39;timeout&#39; timeout(5) do # block of code that should be interrupted if it takes more than 5 seconds end  There&amp;rsquo;s one thing the documentation doesn&amp;rsquo;t tell you though.</description>
    </item>
    
    <item>
      <title>Iterating over a hash containing arrays</title>
      <link>https://vaneyckt.io/posts/iterating_over_a_hash_containing_arrays/</link>
      <pubDate>Tue, 15 Oct 2013 16:46:02 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/iterating_over_a_hash_containing_arrays/</guid>
      <description>Last week I was implementing some auditing functionality in a rails app. At some point I was writing a page that would display how the attributes of a given ActiveRecord object had been changed. One of my colleagues spotted this and pointed out the following neat bit of syntactic sugar in Ruby.
changes = {:attribute_a =&amp;gt; [1, 2], :attribute_b =&amp;gt; [3, 4]} changes.each do |attribute, (before, after)| puts &amp;quot;#{attribute}: #{before} - #{after}&amp;quot; end  I later learned you can even do things like this.</description>
    </item>
    
    <item>
      <title>Regarding if statement scope in Ruby</title>
      <link>https://vaneyckt.io/posts/regarding_if_statement_scope_in_ruby/</link>
      <pubDate>Sat, 31 Aug 2013 20:22:58 +0000</pubDate>
      
      <guid>https://vaneyckt.io/posts/regarding_if_statement_scope_in_ruby/</guid>
      <description>I recently learned that if statements in Ruby do not introduce scope. This means that you can write code like shown below and it&amp;rsquo;ll work fine.
# perfectly valid Ruby code if true foo = 5 end puts foo  At first this seemed a bit weird to me. It wasn&amp;rsquo;t until I read this that I realized Ruby was even more versatile than I had first thought. As it turns out, it is this somewhat unconventional scoping rule that allows us to conditionally replace methods.</description>
    </item>
    
  </channel>
</rss>