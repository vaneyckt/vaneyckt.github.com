<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on vaneyckt.io</title>
    <link>http://localhost:1313/topics/ruby/</link>
    <description>Recent content in Ruby on vaneyckt.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Tue, 15 Oct 2013 16:46:02 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/topics/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Iterating over a hash containing arrays</title>
      <link>http://localhost:1313/posts/iterating_over_a_hash_containing_arrays/</link>
      <pubDate>Tue, 15 Oct 2013 16:46:02 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/iterating_over_a_hash_containing_arrays/</guid>
      <description>&lt;p&gt;Last week I was implementing some auditing functionality in a rails app. At some point I was writing a page that would display how the attributes of a given ActiveRecord object had been changed. One of my colleagues spotted this and pointed out the following neat bit of syntactic sugar in Ruby.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;changes = {:attribute_a =&amp;gt; [1, 2], :attribute_b =&amp;gt; [3, 4]}

changes.each do |attribute, (before, after)|
  puts &amp;quot;#{attribute}: #{before} - #{after}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I later learned you can even do things like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;data = {:foo =&amp;gt; [[1, 2], 3]}

data.each do |key, ((a, b), c)|
  puts &amp;quot;#{key}: #{a} - #{b} - #{c}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Regarding if statement scope in Ruby</title>
      <link>http://localhost:1313/posts/regarding_if_statement_scope_in_ruby/</link>
      <pubDate>Sat, 31 Aug 2013 20:22:58 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/regarding_if_statement_scope_in_ruby/</guid>
      <description>&lt;p&gt;I recently learned that &lt;code&gt;if&lt;/code&gt; statements in Ruby do not introduce scope. This means that you can write code like shown below and it&amp;rsquo;ll work fine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# perfectly valid Ruby code
if true
  foo = 5
end

puts foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first this seemed a bit weird to me. It wasn&amp;rsquo;t until I read &lt;a href=&#34;http://programmers.stackexchange.com/questions/58900/why-if-statements-do-not-introduce-scope-in-ruby-1-9&#34;&gt;this&lt;/a&gt; that I realized Ruby was even more versatile than I had first thought. As it turns out, it is this somewhat unconventional scoping rule that allows us to conditionally replace methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if foo == 5
  def some_method
    # do something
  end
else
  def some_method
    # do something else
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as conditionally modify implementations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if foo == 5
  class someClass
    # ...
  end
else
  module someModule
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s amazing!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>