<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vaneyckt.io</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on vaneyckt.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Tom Van Eyck</copyright>
    <lastBuildDate>Sun, 16 Aug 2015 19:43:34 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installing Chromedriver</title>
      <link>http://localhost:1313/posts/installing_chromedriver/</link>
      <pubDate>Sun, 16 Aug 2015 19:43:34 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/installing_chromedriver/</guid>
      <description>&lt;p&gt;Some time ago I needed to install &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34;&gt;chromedriver&lt;/a&gt; on a ubuntu machine. While this wasn&amp;rsquo;t too hard, I was nevertheless surprised by the number of open &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; questions on this topic. So I decided to leave some notes for my future self.&lt;/p&gt;

&lt;p&gt;First of all, let&amp;rsquo;s install chromedriver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LATEST_RELEASE=$(curl http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
wget http://chromedriver.storage.googleapis.com/$LATEST_RELEASE/chromedriver_linux64.zip
unzip chromedriver_linux64.zip
rm chromedriver_linux64.zip
sudo mv chromedriver /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens when we try and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chromedriver
    chromedriver: error while loading shared libraries: libgconf-2.so.4:
    cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a bit unexpected. Luckily we can easily fix this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install libgconf-2-4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a functioning chromedriver, the only thing left to do is to install Chrome. After all, chromedriver can&amp;rsquo;t function without Chrome.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
$ sudo sh -c &#39;echo &amp;quot;deb http://dl.google.com/linux/chrome/deb/ stable main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list&#39;
$ sudo apt-get update
$ sudo apt-get install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. You should be good to go now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding a post-execution hook to the db:migrate task</title>
      <link>http://localhost:1313/posts/adding_a_post_execution_hook_to_the_db_migrate_task/</link>
      <pubDate>Thu, 09 Oct 2014 16:31:22 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/adding_a_post_execution_hook_to_the_db_migrate_task/</guid>
      <description>&lt;p&gt;A few days ago we discovered that our MySQL database&amp;rsquo;s default character set and collation had been changed to the wrong values. Worse yet, it looked like this change had happened many months ago; something which we had been completely unaware of until now! In order to make sure this didn&amp;rsquo;t happen again, we looked into adding a post-execution hook to the rails &lt;code&gt;db:migrate&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;Our first attempt is shown below. Here, we append a post-execution hook to the existing &lt;code&gt;db:migrate&lt;/code&gt; task by creating a new &lt;code&gt;db:migrate&lt;/code&gt; task. In rake, when a task is defined twice, the behavior of the new task gets appended to the behavior of the old task. So even though the code below may give the impression of overwriting the rails &lt;code&gt;db:migrate&lt;/code&gt; task, we are actually just appending a call to the &lt;code&gt;post_execution_hook&lt;/code&gt; method to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :db do
  def post_execution_hook
    puts &#39;This code gets run after the rails db:migrate task.&#39;
    puts &#39;However, it only runs if the db:migrate task does not throw an exception.&#39;
  end

  task :migrate do
    post_execution_hook
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the above example only runs the appended code if the original &lt;code&gt;db:migrate&lt;/code&gt; task does not throw any exceptions. Luckily we can do better than that by taking a slightly different approach. Rather than appending code, we are going to have a go at prepending it instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;namespace :db do
  def post_execution_hook
    puts &#39;This code gets run after the rails db:migrate task.&#39;
    puts &#39;It will ALWAYS run.&#39;
  end

  task :attach_hook do
    at_exit { post_execution_hook }
  end
end

Rake::Task[&#39;db:migrate&#39;].enhance([&#39;db:attach_hook&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we make use of the &lt;a href=&#34;http://ruby-doc.org/stdlib-2.0.0/libdoc/rake/rdoc/Rake/Task.html#method-i-enhance&#34;&gt;enhance method&lt;/a&gt; to add &lt;code&gt;db:attach_hook&lt;/code&gt; as a prerequisite task to &lt;code&gt;db:migrate&lt;/code&gt;. This means that calling &lt;code&gt;db:migrate&lt;/code&gt; will now cause the &lt;code&gt;db:attach_hook&lt;/code&gt; task to get executed before &lt;code&gt;db:migrate&lt;/code&gt; gets run. The &lt;code&gt;db:attach_hook&lt;/code&gt; task creates an &lt;code&gt;at_exit&lt;/code&gt; hook that will trigger our post-execution code upon exit of the &lt;code&gt;db:migrate&lt;/code&gt; task. This means that our post-execution hook will now get called even when &lt;code&gt;db:migrate&lt;/code&gt; raises an exception!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>String.isEmpty() is not available before Android 2.3</title>
      <link>http://localhost:1313/posts/string_isEmpty_is_not_available_before_android_2_3/</link>
      <pubDate>Wed, 14 May 2014 20:14:48 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/string_isEmpty_is_not_available_before_android_2_3/</guid>
      <description>&lt;p&gt;Today I learned that Android API level 8 and lower does &lt;a href=&#34;http://stackoverflow.com/questions/5244927/cant-call-string-isempty-in-android&#34;&gt;not support String.isEmpty()&lt;/a&gt;. Keep this is mind when you’re working on an app that needs to be able to run on older phones and use &lt;code&gt;String.length() == 0&lt;/code&gt; instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programmatically rotating the Android screen</title>
      <link>http://localhost:1313/posts/programmatically_rotating_the_android_screen/</link>
      <pubDate>Thu, 20 Mar 2014 20:08:17 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/programmatically_rotating_the_android_screen/</guid>
      <description>&lt;p&gt;A lot of digital ink has been spilled on this subject, so I figured it might be worth to briefly talk about this. You can either change the orientation through ADB or through an app. While the ADB approach is the easiest, it might not work on all devices or on all Android versions. For example, the &lt;code&gt;dumpsys&lt;/code&gt; output of a Kindle Fire is different than that of a Samsung Galaxy S4, so you might need to tweak the grepping of the output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# get current orientation
adb shell dumpsys input | grep SurfaceOrientation | awk &#39;{print $2}&#39;

# change orientaton to portait
adb shell content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:0
adb shell content insert --uri content://settings/system --bind name:s:user_rotation --bind value:i:0

# change orientation to landscape
adb shell content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:0
adb shell content insert --uri content://settings/system --bind name:s:user_rotation --bind value:i:1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don’t want to use ADB and prefer to change the orientation through an Android app instead, then you can just use these commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// get current orientation
final int orientation = myActivity.getResources().getConfiguration().orientation;

// change orientation to portrait
myActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

// change orientation to landscape
myActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Programmatically creating Android touch events</title>
      <link>http://localhost:1313/posts/programmatically_creating_android_touch_events/</link>
      <pubDate>Tue, 04 Mar 2014 20:40:56 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/programmatically_creating_android_touch_events/</guid>
      <description>&lt;p&gt;Recent versions of Android have the &lt;code&gt;adb shell input touch&lt;/code&gt; functionality to simulate touch events on an Android device or simulator. However, older Android versions (like 2.3) do not support this command. Luckily it is possible to recreate this functionality by running &lt;code&gt;adb shell getevent&lt;/code&gt; to capture events as they are being generated. These events can then later be replayed using the &lt;code&gt;adb shell sendevent&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;adb shell getevent&lt;/code&gt; when touching the screen might get you something like shown below. Notice how the output is in hexadecimal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/dev/input/event7: 0001 014a 00000001
/dev/input/event7: 0003 003a 00000001
/dev/input/event7: 0003 0035 000001ce
/dev/input/event7: 0003 0036 00000382
/dev/input/event7: 0000 0002 00000000
/dev/input/event7: 0000 0000 00000000
/dev/input/event7: 0001 014a 00000000
/dev/input/event7: 0003 003a 00000000
/dev/input/event7: 0003 0035 000001ce
/dev/input/event7: 0003 0036 00000382
/dev/input/event7: 0000 0002 00000000
/dev/input/event7: 0000 0000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the &lt;code&gt;adb shell sendevent&lt;/code&gt; command expect all of its input to be in decimal. So if we wanted to replay the above events, we&amp;rsquo;d need to do something like shown below. Note that 462 and 898 are the x and y coordinates of this particular touch event.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell sendevent /dev/input/event7: 1 330 1
adb shell sendevent /dev/input/event7: 3 58 1
adb shell sendevent /dev/input/event7: 3 53 462
adb shell sendevent /dev/input/event7: 3 54 898
adb shell sendevent /dev/input/event7: 0 2 0
adb shell sendevent /dev/input/event7: 0 0 0
adb shell sendevent /dev/input/event7: 1 330 0
adb shell sendevent /dev/input/event7: 3 58 0
adb shell sendevent /dev/input/event7: 3 53 462
adb shell sendevent /dev/input/event7: 3 54 898
adb shell sendevent /dev/input/event7: 0 2 0
adb shell sendevent /dev/input/event7: 0 0 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A visual explanation of SQL joins</title>
      <link>http://localhost:1313/posts/a_visual_explanation_of_sql_joins/</link>
      <pubDate>Thu, 20 Feb 2014 20:22:17 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/a_visual_explanation_of_sql_joins/</guid>
      <description>&lt;p&gt;I admit that I find myself going to &lt;a href=&#34;http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/&#34;&gt;this article&lt;/a&gt; every time I need to write some joins. Hopefully putting it here will save me from always having to google it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check the order of your rescue_from handlers!</title>
      <link>http://localhost:1313/posts/check_the_order_of_your_rescue_from_handlers/</link>
      <pubDate>Mon, 11 Nov 2013 21:34:16 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/check_the_order_of_your_rescue_from_handlers/</guid>
      <description>&lt;p&gt;Our &lt;code&gt;rescue_from&lt;/code&gt; handlers used to be defined like shown below. This might look okay to you. At first glance everything looks fine, right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class WidgetsController &amp;lt; ActionController::Base
  rescue_from ActionController::RoutingError, :with =&amp;gt; :render_404
  rescue_from Exception,                      :with =&amp;gt; :render_500
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out it&amp;rsquo;s not okay at all. Handlers are searched &lt;a href=&#34;http://apidock.com/rails/ActiveSupport/Rescuable/ClassMethods/rescue_from&#34;&gt;from bottom to top&lt;/a&gt;. This means that they should always be defined in order of most generic to most specific. Or in other words, the above code is exactly the wrong thing to do. Instead, we need to write our handlers like shown here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class WidgetsController &amp;lt; ActionController::Base
  rescue_from Exception,                      :with =&amp;gt; :render_500
  rescue_from ActionController::RoutingError, :with =&amp;gt; :render_404
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The javascript event loop</title>
      <link>http://localhost:1313/posts/the_javascript_event_loop/</link>
      <pubDate>Sun, 10 Nov 2013 20:50:04 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/the_javascript_event_loop/</guid>
      <description>&lt;p&gt;Sometimes you come across an article that is so well written you can&amp;rsquo;t do anything but link to it. So if you&amp;rsquo;ve ever wondered why the javascript runtime is so good at asynchronous operations, then you should definitely give &lt;a href=&#34;http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/&#34;&gt;this article&lt;/a&gt; a read.&lt;/p&gt;

&lt;p&gt;Some snippets:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript runtimes contain a message queue which stores a list of messages to be processed and their associated callback functions. These messages are queued in response to external events (such as a mouse being clicked or receiving the response to an HTTP request) given a callback function has been provided. If, for example a user were to click a button and no callback function was provided – no message would have been enqueued.&lt;/p&gt;

&lt;p&gt;In a loop, the queue is polled for the next message (each poll referred to as a “tick”) and when a message is encountered, the callback for that message is executed.&lt;/p&gt;

&lt;p&gt;The calling of this callback function serves as the initial frame in the call stack, and due to JavaScript being single-threaded, further message polling and processing is halted pending the return of all calls on the stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As well as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using Web Workers enables you to offload an expensive operation to a separate thread of execution, freeing up the main thread to do other things. The worker includes a separate message queue, event loop, and memory space independent from the original thread that instantiated it. Communication between the worker and the main thread is done via message passing, which looks very much like the traditional, evented code-examples we’ve already seen.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Bug hunting with git bisect</title>
      <link>http://localhost:1313/posts/bug_hunting_with_git_bisect/</link>
      <pubDate>Mon, 04 Nov 2013 20:02:14 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/bug_hunting_with_git_bisect/</guid>
      <description>&lt;p&gt;Today I was looking into what I thought was going to be a simple bug. The problem seemed straightforward enough, so I did a quick grep of the codebase, found three pieces of code that looked like likely culprits, made some modifications, triggered the bug, and found that absolutely nothing had changed. Half an hour and a lot of additional digging later I was stumped. I had no idea what was going on.&lt;/p&gt;

&lt;p&gt;It was at this point that I remembered &lt;code&gt;git bisect&lt;/code&gt;. This git command asks you to specify two commits: one where things are working, and another one where things are broken. It then does a binary search across the range of commits in between these two. Each search step asks you whether the current commit contains broken code or not, after which it automatically selects the next commit for you. There&amp;rsquo;s a great tutorial over &lt;a href=&#34;http://webchick.net/node/99&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git bisect start
$ git bisect good rj6y4j3
$ git bisect bad 2q7f529
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took me all of five minutes to discover the source of the bug this way. I can safely say that it would have taken me ages to track down this particular bit of offending code as it was located in a custom bug fix for a popular third party library (I&amp;rsquo;m looking at you &lt;a href=&#34;https://github.com/getsentry/raven-ruby&#34;&gt;Sentry&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why is MySQL converting my NULLs to blanks?</title>
      <link>http://localhost:1313/posts/why_is_mysql_converting_my_nulls_to_blanks/</link>
      <pubDate>Fri, 01 Nov 2013 19:17:56 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/why_is_mysql_converting_my_nulls_to_blanks/</guid>
      <description>&lt;p&gt;A while ago I ran into an issue where some records were showing a blank value in a given column. This was a bit weird as a blank value had never been written to that column. After a bit of searching we found that we had a bug that had inadvertently been writing the occasional NULL value to that particular column though. So how did those NULLs get turned into blanks?&lt;/p&gt;

&lt;p&gt;It turns out that MySQL can operate in different &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html&#34;&gt;server modes&lt;/a&gt;. You can check your server mode by running one of the two commands below. Note that your server mode will be blank by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SHOW GLOBAL VARIABLES where Variable_name = &#39;sql_mode&#39;;
SHOW SESSION VARIABLES where Variable_name = &#39;sql_mode&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we know about server modes we can talk about &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.0/en/data-type-defaults.html&#34;&gt;data type defaults&lt;/a&gt;. Basically, each MySQL column has an implicit default value assigned to it. Under certain circumstances this default value might be used instead of the value you were expecting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As of MySQL 5.0.2, if a column definition includes no explicit DEFAULT value, MySQL determines the default value as follows:&lt;/p&gt;

&lt;p&gt;If the column can take NULL as a value, the column is defined with an explicit DEFAULT NULL clause. This is the same as before 5.0.2.&lt;/p&gt;

&lt;p&gt;If the column cannot take NULL as the value, MySQL defines the column with no explicit DEFAULT clause. Exception: If the column is defined as part of a PRIMARY KEY but not explicitly as NOT NULL, MySQL creates it as a NOT NULL column (because PRIMARY KEY columns must be NOT NULL), but also assigns it a DEFAULT clause using the implicit default value. To prevent this, include an explicit NOT NULL in the definition of any PRIMARY KEY column.&lt;/p&gt;

&lt;p&gt;For data entry into a NOT NULL column that has no explicit DEFAULT clause, if an INSERT or REPLACE statement includes no value for the column, or an UPDATE statement sets the column to NULL, MySQL handles the column according to the SQL mode in effect at the time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;If strict SQL mode is enabled, an error occurs for transactional tables and the statement is rolled back. For nontransactional tables, an error occurs, but if this happens for the second or subsequent row of a multiple-row statement, the preceding rows will have been inserted.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If strict mode is not enabled, MySQL sets the column to the implicit default value for the column data type.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;We found that our code was sometimes writing NULLs to a NOT NULL column on a server that was not running in strict mode. This in turn caused our NULLs to silently get changed to blanks as this was the column default value. Mystery solved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using environment variables in migrations</title>
      <link>http://localhost:1313/posts/using_environment_variables_in_migrations/</link>
      <pubDate>Tue, 29 Oct 2013 17:42:28 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/using_environment_variables_in_migrations/</guid>
      <description>&lt;p&gt;Recently we had to run a migration that was so slow we couldn&amp;rsquo;t afford the downtime it would cause. In order to get around this, it was decided to put two code paths in the migration: one that was slow and thorough, and one that was quick but didn&amp;rsquo;t perform any safety checks.&lt;/p&gt;

&lt;p&gt;The first path would be run on a recent database dump, whereas the latter would be executed directly on the live database once the first had finished without error. This was a lot less crazy than it might sound as the particular table under modification had very infrequent changes.&lt;/p&gt;

&lt;p&gt;It was decided to use environment variables to allow for easy switching between code paths. This is what the code ended up looking like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MyDangerousMigration &amp;lt; ActiveRecord::Migration
  def change
    if ENV[&#39;skip_checks&#39;] == &#39;true&#39;
      # code without safety checks
    else
      # code with safety checks
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could then be run like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;skip_checks=true bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting connection information with lsof</title>
      <link>http://localhost:1313/posts/getting_connection_information_with_lsof/</link>
      <pubDate>Mon, 21 Oct 2013 17:21:52 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/getting_connection_information_with_lsof/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://linux.die.net/man/8/lsof&#34;&gt;lsof command&lt;/a&gt; is one of those super useful commands for figuring out what connections are taking place on your machine. While the &lt;code&gt;lsof&lt;/code&gt; command technically just lists open files, just about everything in linux (even sockets) is a file!&lt;/p&gt;

&lt;p&gt;Some useful commands:&lt;/p&gt;

&lt;h3 id=&#34;list-all-network-connections:af3807b2c0cfda8f5c0a92778b96cb1b&#34;&gt;List all network connections&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -i

COMMAND     PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
Spotify   36908 vaneyckt   53u  IPv4 0x2097c8deb175c0dd      0t0  TCP localhost:4381 (LISTEN)
Spotify   36908 vaneyckt   54u  IPv4 0x2097c8deab18027d      0t0  TCP localhost:4371 (LISTEN)
Spotify   36908 vaneyckt   71u  IPv4 0x2097c8deba747c1d      0t0  UDP *:57621
Spotify   36908 vaneyckt   72u  IPv4 0x2097c8deb18ef4cd      0t0  TCP *:57621 (LISTEN)
Spotify   36908 vaneyckt   77u  IPv4 0x2097c8deb993b255      0t0  UDP ip-192-168-0-101.ec2.internal:61009
Spotify   36908 vaneyckt   90u  IPv4 0x2097c8dea8c4a66d      0t0  TCP ip-192-168-0-101.ec2.internal:62432-&amp;gt;lon3-accesspoint-a57.lon3.spotify.com:https (ESTABLISHED)
Spotify   36908 vaneyckt   91u  IPv4 0x2097c8de8d029f2d      0t0  UDP ip-192-168-0-101.ec2.internal:52706
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-all-network-connections-on-port-4381:af3807b2c0cfda8f5c0a92778b96cb1b&#34;&gt;List all network connections on port 4381&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -i :4381

COMMAND   PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
Spotify 36908 vaneyckt   53u  IPv4 0x2097c8deb175c0dd      0t0  TCP localhost:4381 (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-ports-listening-for-connections:af3807b2c0cfda8f5c0a92778b96cb1b&#34;&gt;Find ports listening for connections&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -i | grep -i LISTEN

Spotify   36908 vaneyckt   53u  IPv4 0x2097c8deb175c0dd      0t0  TCP localhost:4381 (LISTEN)
Spotify   36908 vaneyckt   54u  IPv4 0x2097c8deab18027d      0t0  TCP localhost:4371 (LISTEN)
Spotify   36908 vaneyckt   72u  IPv4 0x2097c8deb18ef4cd      0t0  TCP *:57621 (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-established-connections:af3807b2c0cfda8f5c0a92778b96cb1b&#34;&gt;Find established connections&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -i | grep -i ESTABLISHED

Spotify   36908 vaneyckt   90u  IPv4 0x2097c8dea8c4a66d      0t0  TCP ip-192-168-0-101.ec2.internal:62432-&amp;gt;lon3-accesspoint-a57.lon3.spotify.com:https (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;show-all-files-opened-by-a-given-process:af3807b2c0cfda8f5c0a92778b96cb1b&#34;&gt;Show all files opened by a given process&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -p 36908

COMMAND   PID     USER   FD     TYPE             DEVICE  SIZE/OFF     NODE NAME
Spotify 36908 vaneyckt   90u    IPv4 0x2097c8dea8c4a66d       0t0      TCP ip-192-168-0-101.ec2.internal:62432-&amp;gt;lon3-accesspoint-a57.lon3.spotify.com:https (ESTABLISHED)
Spotify 36908 vaneyckt   91u    IPv4 0x2097c8de8d029f2d       0t0      UDP ip-192-168-0-101.ec2.internal:52706
Spotify 36908 vaneyckt   92u     REG                1,4   9389456 59387889 /Users/vaneyckt/Library/Caches/com.spotify.client/Data/4a/4a5a23cf1e9dc4210b3c801d57a899098dc12418.file
Spotify 36908 vaneyckt   93u     REG                1,4   8658944 58471210 /private/var/folders/xv/fjmwzr9x5mq_s7dchjq87hjm0000gn/T/.org.chromium.Chromium.6b0Vzp
Spotify 36908 vaneyckt   94u     REG                1,4    524656 54784499 /Users/vaneyckt/Library/Caches/com.spotify.client/Browser/index
Spotify 36908 vaneyckt   95u     REG                1,4     81920 54784500 /Users/vaneyckt/Library/Caches/com.spotify.client/Browser/data_0
Spotify 36908 vaneyckt   96u     REG                1,4    532480 54784501 /Users/vaneyckt/Library/Caches/com.spotify.client/Browser/data_1
Spotify 36908 vaneyckt   97u     REG                1,4   2105344 54784502 /Users/vaneyckt/Library/Caches/com.spotify.client/Browser/data_2
Spotify 36908 vaneyckt   98u     REG                1,4  12591104 54784503 /Users/vaneyckt/Library/Caches/com.spotify.client/Browser/data_3
Spotify 36908 vaneyckt   99r     REG                1,4    144580    28952 /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/Resources/HIToolbox.rsrc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Carefully converting your MySQL database to utf8</title>
      <link>http://localhost:1313/posts/carefully_converting_your_mysql_database_to_utf8/</link>
      <pubDate>Sun, 20 Oct 2013 17:19:31 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/carefully_converting_your_mysql_database_to_utf8/</guid>
      <description>&lt;p&gt;Converting all the data in your database can be a nail-biting experience. As you can see from the code below we are doing our best to be super careful. We convert each table separately and before each conversion we store the table&amp;rsquo;s column types and an MD5 hash of every row in the table (we were lucky enough to not have enormous tables). After converting the table we check that no column types or rows were changed. It goes without saying that we do a trial run on a database dump first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;set&#39;
require &#39;digest/md5&#39;

CHARACTER_SET = &#39;utf8&#39;
COLLATION = &#39;utf8_unicode_ci&#39;

class ConvertAllTablesToUtf8 &amp;lt; ActiveRecord::Migration
  def up
    ActiveRecord::Base.connection.tables.each do |table|
      ActiveRecord::Base.transaction do
        ActiveRecord::Base.connection.execute(&amp;quot;LOCK TABLES #{table} WRITE&amp;quot;)
          say &amp;quot;starting work on table: #{table}&amp;quot;

          model = table.classify.constantize
          say &amp;quot;associated model: #{model}&amp;quot;

          say &#39;storing column types information before converting table to unicode&#39;
          column_types_before = model.columns_hash.each_with_object({}) do |(column_name, column_info), column_types_before|
            column_types_before[column_name] = [column_info.sql_type, column_info.type]
          end

          say &#39;storing set of table data hashes before converting table to unicode&#39;
          table_data_before = Set.new
          model.find_each do |datum|
            table_data_before &amp;lt;&amp;lt; Digest::MD5.hexdigest(datum.inspect)
          end

          say &#39;converting table to unicode&#39;
          execute(&amp;quot;ALTER TABLE #{table} CONVERT TO CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)
          execute(&amp;quot;ALTER TABLE #{table} DEFAULT CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)

          say &#39;getting column types information after conversion to unicode&#39;
          column_types_after = model.columns_hash.each_with_object({}) do |(column_name, column_info), column_types_after|
            column_types_after[column_name] = [column_info.sql_type, column_info.type]
          end

          say &#39;getting set of table data hashes after conversion to unicode&#39;
          table_data_after = Set.new
          model.find_each do |datum|
            table_data_after &amp;lt;&amp;lt; Digest::MD5.hexdigest(datum.inspect)
          end

          say &amp;quot;checking that column types haven&#39;t changed&amp;quot;
          if column_types_before != column_types_after
            raise &amp;quot;Column types of the #{table} table have changed&amp;quot;
          end

          say &amp;quot;checking that data hasn&#39;t changed&amp;quot;
          if table_data_before != table_data_after
            raise &amp;quot;Data in the #{table} table has changed&amp;quot;
          end
        ActiveRecord::Base.connection.execute(&#39;UNLOCK TABLES&#39;)
      end
    end

    execute(&amp;quot;ALTER DATABASE #{ActiveRecord::Base.connection.current_database} DEFAULT CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how we lock each table before converting it. If we didn&amp;rsquo;t lock it then new data could be written to the table while we are busy storing MD5 hashes of the rows in preparation for the actual conversion. This, in turn, would cause our migration to complain that new data was present after the conversion had taken place.&lt;/p&gt;

&lt;p&gt;We also wrap each table conversion inside a transaction. I&amp;rsquo;ve talked before about &lt;a href=&#34;http://vaneyckt.io/posts/rails_migrations_and_the_dangers_of_implicit_commits/&#34;&gt;how converting a table will cause an implicit commit&lt;/a&gt;, meaning that a rollback won&amp;rsquo;t undo any of the changes made by the conversion. So why have a transaction here then? Imagine that an exception were to be raised during our migration. In that case we want to ensure our table lock gets dropped as soon as possible. The transaction guarantees this behavior.&lt;/p&gt;

&lt;p&gt;Also, if we weren&amp;rsquo;t so paranoid about checking the before and after data as part of our migration, we could simplify this code quite a bit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;CHARACTER_SET = &#39;utf8&#39;
COLLATION = &#39;utf8_unicode_ci&#39;

class ConvertAllTablesToUtf8 &amp;lt; ActiveRecord::Migration
  def up
    ActiveRecord::Base.connection.tables.each do |table|
      say &#39;converting table to unicode&#39;
      execute(&amp;quot;ALTER TABLE #{table} CONVERT TO CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)
      execute(&amp;quot;ALTER TABLE #{table} DEFAULT CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)
    end

    execute(&amp;quot;ALTER DATABASE #{ActiveRecord::Base.connection.current_database} DEFAULT CHARACTER SET #{CHARACTER_SET} COLLATE #{COLLATION}&amp;quot;)
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we can drop the lock as the &lt;code&gt;ALTER TABLE&lt;/code&gt; command &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.1/en/alter-table.html&#34;&gt;will prevent all writes to the table while simultaneously allowing all reads&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases, ALTER TABLE makes a temporary copy of the original table. MySQL waits for other operations that are modifying the table, then proceeds. It incorporates the alteration into the copy, deletes the original table, and renames the new one. While ALTER TABLE is executing, the original table is readable by other sessions. Updates and writes to the table that begin after the ALTER TABLE operation begins are stalled until the new table is ready, then are automatically redirected to the new table without any failed updates. The temporary copy of the original table is created in the database directory of the new table. This can differ from the database directory of the original table for ALTER TABLE operations that rename the table to a different database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Furthermore, since we now no longer have a lock on our table we can also drop the transaction. This gives us the much-simplified code shown above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Character set vs collation</title>
      <link>http://localhost:1313/posts/character_set_vs_collation/</link>
      <pubDate>Sat, 19 Oct 2013 20:31:43 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/character_set_vs_collation/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a surprising amount of confusion about the difference between these two terms. The best explanation I&amp;rsquo;ve found is &lt;a href=&#34;http://stackoverflow.com/questions/341273/what-does-character-set-and-collation-mean-exactly/341481#341481&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A character set is a subset of all written glyphs. A character encoding specifies how those characters are mapped to numeric values. Some character encodings, like UTF-8 and UTF-16, can encode any character in the Universal Character Set. Others, like US-ASCII or ISO-8859-1 can only encode a small subset, since they use 7 and 8 bits per character, respectively. Because many standards specify both a character set and a character encoding, the term &amp;ldquo;character set&amp;rdquo; is often substituted freely for &amp;ldquo;character encoding&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A collation comprises rules that specify how characters can be compared for sorting. Collations rules can be locale-specific: the proper order of two characters varies from language to language.&lt;/p&gt;

&lt;p&gt;Choosing a character set and collation comes down to whether your application is internationalized or not. If not, what locale are you targeting?&lt;/p&gt;

&lt;p&gt;In order to choose what character set you want to support, you have to consider your application. If you are storing user-supplied input, it might be hard to foresee all the locales in which your software will eventually be used. To support them all, it might be best to support the UCS (Unicode) from the start. However, there is a cost to this; many western European characters will now require two bytes of storage per character instead of one.&lt;/p&gt;

&lt;p&gt;Choosing the right collation can help performance if your database uses the collation to create an index, and later uses that index to provide sorted results. However, since collation rules are often locale-specific, that index will be worthless if you need to sort results according to the rules of another locale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing I&amp;rsquo;d like to add is that some collations are more cpu intensive than others. For example, &lt;code&gt;utf8_general_ci&lt;/code&gt; treats À, Á, and Å as being equal to A when doing comparisons. This is in contrast to &lt;code&gt;utf8_unicode_ci&lt;/code&gt; which uses about 10% more cpu, but differentiates between these characters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL write locks also prevent reads</title>
      <link>http://localhost:1313/posts/mysql_write_locks_also_prevent_reads/</link>
      <pubDate>Thu, 17 Oct 2013 17:20:45 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/mysql_write_locks_also_prevent_reads/</guid>
      <description>&lt;p&gt;Locking a table with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;table_name = &#39;widgets&#39;
ActiveRecord::Base.connection.execute(&amp;quot;LOCK TABLES #{table_name} WRITE&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ensures that &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/lock-tables.html&#34;&gt;only the current connection can access that table&lt;/a&gt;. Other connections cannot even read from this table while it is locked!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>